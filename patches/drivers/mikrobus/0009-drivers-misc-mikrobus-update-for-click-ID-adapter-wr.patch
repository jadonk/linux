From b854845b2ffc90e9a337650288907ec2f8d7cb6f Mon Sep 17 00:00:00 2001
From: vaishnav98 <vaishnav@beagleboard.org>
Date: Tue, 15 Jun 2021 08:59:56 +0530
Subject: [PATCH] drivers: misc: mikrobus: update for click ID adapter write

Signed-off-by: vaishnav <vaishnav@beagleboard.org>
---
 drivers/misc/mikrobus/mikrobus_core.c     | 107 +++-------------------
 drivers/misc/mikrobus/mikrobus_id.c       |  42 ++++-----
 drivers/misc/mikrobus/mikrobus_manifest.c |   8 +-
 3 files changed, 36 insertions(+), 121 deletions(-)

diff --git a/drivers/misc/mikrobus/mikrobus_core.c b/drivers/misc/mikrobus/mikrobus_core.c
index b20281c0b150..4185f37b9fc7 100644
--- a/drivers/misc/mikrobus/mikrobus_core.c
+++ b/drivers/misc/mikrobus/mikrobus_core.c
@@ -45,6 +45,8 @@
 
 #include "mikrobus_manifest.h"
 
+#define MIKROBUS_ID_USER_EEPROM_ADDR	0x0A0A
+
 static DEFINE_MUTEX(core_lock);
 static DEFINE_IDR(mikrobus_port_idr);
 static struct class_compat *mikrobus_port_compat_class;
@@ -65,12 +67,22 @@ int mikrobus_port_scan_eeprom(struct mikrobus_port *port)
 	int manifest_size;
 	char header[12];
 	int retval;
+	uint16_t manifest_start_addr;
 	char *buf;
 
 	if(port->skip_scan)
 		return -EINVAL;
 
-	retval = nvmem_device_read(port->eeprom, 0, 12, header);
+	retval = nvmem_device_read(port->eeprom, MIKROBUS_ID_USER_EEPROM_ADDR, 1, header);
+	if (retval != 1) {
+		dev_err(&port->dev, "failed to fetch manifest start address %d\n",
+			retval);
+		return -EINVAL;
+	}
+	manifest_start_addr = header[0] << 8;
+	pr_info("manifest start address is 0x%x \n", manifest_start_addr);
+
+	retval = nvmem_device_read(port->eeprom, manifest_start_addr, 12, header);
 	if (retval != 12) {
 		dev_err(&port->dev, "failed to fetch manifest header %d\n",
 			retval);
@@ -85,7 +97,7 @@ int mikrobus_port_scan_eeprom(struct mikrobus_port *port)
 	buf = kzalloc(manifest_size, GFP_KERNEL);
 	if (!buf)
 		return -ENOMEM;
-	retval = nvmem_device_read(port->eeprom, 0, manifest_size, buf);
+	retval = nvmem_device_read(port->eeprom, manifest_start_addr, manifest_size, buf);
 	if (retval != manifest_size) {
 		dev_err(&port->dev, "failed to fetch manifest %d\n", retval);
 		retval = -EINVAL;
@@ -168,94 +180,6 @@ static ssize_t new_device_store(struct device *dev, struct device_attribute *att
 }
 static DEVICE_ATTR_WO(new_device);
 
-static ssize_t rescan_store(struct device *dev, struct device_attribute *attr,
-							const char *buf, size_t count)
-{
-	struct mikrobus_port *port = to_mikrobus_port(dev);
-	unsigned long id;
-	int retval;
-	int i;
-
-	if (kstrtoul(buf, 0, &id)) {
-		dev_err(dev, "cannot parse trigger\n");
-		return -EINVAL;
-	}
-	if (port->board) {
-		dev_err(dev, "already has board registered\n");
-		return -EBUSY;
-	}
-
-	if (!port->w1_master){
-		return mikrobus_port_id_eeprom_probe(port);
-	}
-	/* Enter ID Mode */
-	sprintf(port->pinctrl_selected[MIKROBUS_PINCTRL_SPI], "%s_%s",
-			MIKROBUS_PINCTRL_STR[MIKROBUS_PINCTRL_SPI], MIKROBUS_PINCTRL_STATE_GPIO);
-
-	retval = mikrobus_port_pinctrl_select(port);
-	/* set MOSI LOW, SCK HIGH */
-	gpiod_direction_output(port->gpios->desc[MIKROBUS_PIN_MOSI], 0);
-	gpiod_direction_output(port->gpios->desc[MIKROBUS_PIN_SCK], 1);
-	msleep(100);
-	for( i = 0; i < 4; i++){
-		gpiod_set_value(port->gpios->desc[MIKROBUS_PIN_MOSI] , 1);
-		udelay(1000);
-		gpiod_set_value(port->gpios->desc[MIKROBUS_PIN_MOSI] , 0);
-		udelay(1000);
-	}
-	msleep(100); /* temporary delay to fix ROM ID copy */
-
-	port->skip_scan = 0;
-	retval = mikrobus_port_scan_eeprom(port);
-	if (retval) {
-		dev_err(dev, "board register from manifest failed\n");
-		return -EINVAL;
-	}
-	return count;
-}
-static DEVICE_ATTR_WO(rescan);
-
-static ssize_t idmode_store(struct device *dev, struct device_attribute *attr,
-							const char *buf, size_t count)
-{
-	struct mikrobus_port *port = to_mikrobus_port(dev);
-	unsigned long id;
-	int retval;
-	int i;
-
-	if (kstrtoul(buf, 0, &id)) {
-		dev_err(dev, "cannot parse trigger\n");
-		return -EINVAL;
-	}
-	if (port->board) {
-		dev_err(dev, "already has board registered\n");
-		return -EBUSY;
-	}
-
-	if (!port->w1_master){
-		return mikrobus_port_id_eeprom_probe(port);
-	}
-	/* Enter ID Mode */
-	sprintf(port->pinctrl_selected[MIKROBUS_PINCTRL_SPI], "%s_%s",
-			MIKROBUS_PINCTRL_STR[MIKROBUS_PINCTRL_SPI], MIKROBUS_PINCTRL_STATE_GPIO);
-
-	retval = mikrobus_port_pinctrl_select(port);
-	/* set MOSI LOW, SCK HIGH */
-	gpiod_direction_output(port->gpios->desc[MIKROBUS_PIN_MOSI], 0);
-	gpiod_direction_output(port->gpios->desc[MIKROBUS_PIN_SCK], 1);
-	msleep(100);
-	for( i = 0; i < 4; i++){
-		gpiod_set_value(port->gpios->desc[MIKROBUS_PIN_MOSI] , 1);
-		udelay(1000);
-		gpiod_set_value(port->gpios->desc[MIKROBUS_PIN_MOSI] , 0);
-		udelay(1000);
-	}
-	msleep(100); /* temporary delay to fix ROM ID copy */
-	port->skip_scan = 1;
-	return count;
-}
-static DEVICE_ATTR_WO(idmode);
-
 static ssize_t delete_device_store(struct device *dev, struct device_attribute *attr,
 							const char *buf, size_t count)
 {
@@ -276,8 +200,7 @@ static ssize_t delete_device_store(struct device *dev, struct device_attribute *
 static DEVICE_ATTR_IGNORE_LOCKDEP(delete_device, 0200, NULL, delete_device_store);
 
 static struct attribute *mikrobus_port_attrs[] = {
-	&dev_attr_new_device.attr, &dev_attr_rescan.attr, &dev_attr_idmode.attr,
-	&dev_attr_delete_device.attr, &dev_attr_name.attr, NULL};
+	&dev_attr_new_device.attr, &dev_attr_delete_device.attr, &dev_attr_name.attr, NULL};
 ATTRIBUTE_GROUPS(mikrobus_port);
 
 static void mikrobus_port_release(struct device *dev)
diff --git a/drivers/misc/mikrobus/mikrobus_id.c b/drivers/misc/mikrobus/mikrobus_id.c
index d488a900d7cd..2b97342327d9 100644
--- a/drivers/misc/mikrobus/mikrobus_id.c
+++ b/drivers/misc/mikrobus/mikrobus_id.c
@@ -18,7 +18,7 @@
 
 #define W1_EEPROM_MIKROBUS_ID	0x43
 
-#define W1_MIKROBUS_ID_EEPROM_SIZE	1536
+#define W1_MIKROBUS_ID_EEPROM_SIZE	0x0A00
 #define W1_MIKROBUS_ID_EEPROM_SCRATCH_SIZE	32
 #define W1_MIKROBUS_ID_EEPROM_VERIFY_SCRATCH_SIZE	35
 #define W1_MIKROBUS_ID_READ_EEPROM	0xF0
@@ -27,7 +27,6 @@
 #define W1_MIKROBUS_ID_EEPROM_WRITE_SCRATCH	0x0F
 #define W1_MIKROBUS_ID_EEPROM_READ_SCRATCH	0xAA
 #define W1_MIKROBUS_ID_EEPROM_COPY_SCRATCH	0x55
-#define W1_MIKROBUS_ID_EEPROM_COPY_SCRATCH_ES	0x40
 #define W1_MIKROBUS_ID_EEPROM_TPROG_MS		20
 
 static int w1_mikrobus_id_readblock(struct w1_slave *sl, int off, int count, char *buf)
@@ -38,8 +37,8 @@ static int w1_mikrobus_id_readblock(struct w1_slave *sl, int off, int count, cha
 	
 	do {
 		wrbuf[0] = W1_MIKROBUS_ID_READ_EEPROM;
-		wrbuf[1] = 0;
-		wrbuf[2] = 0;
+		wrbuf[1] = off & 0xFF;
+		wrbuf[2] = off >> 8;
 
 		if (w1_reset_select_slave(sl))
 				return -1;
@@ -69,13 +68,13 @@ static int w1_mikrobus_id_movescratch(struct w1_slave *sl, int addr, char *buf)
 {
 	u8 wrbuf[4];
 	u8 scratchpad_verify[W1_MIKROBUS_ID_EEPROM_VERIFY_SCRATCH_SIZE];
-	u8 write_scratchpad_crc[2];
+	u8 TA1, TA2, ES;
 	int verify_status;
 	int tries;
 
 	wrbuf[0] = W1_MIKROBUS_ID_EEPROM_WRITE_SCRATCH;
-	wrbuf[1] = addr >> 8;
-	wrbuf[2] = addr & 0xFF;
+	wrbuf[1] = addr & 0xFF;
+	wrbuf[2] = addr >> 8;
 
 	tries = W1_MIKROBUS_ID_EEPROM_WRITE_RETRIES;
 	do {
@@ -83,13 +82,14 @@ static int w1_mikrobus_id_movescratch(struct w1_slave *sl, int addr, char *buf)
 			return -1;
 		w1_write_block(sl->master, wrbuf, 3);
 		w1_write_block(sl->master, buf, W1_MIKROBUS_ID_EEPROM_SCRATCH_SIZE);
-		udelay(100); /* delay for CRC calculation at slave */
-		w1_read_block(sl->master, write_scratchpad_crc, 2);
 		if (w1_reset_select_slave(sl))
 			return -1;
 		w1_write_8(sl->master, W1_MIKROBUS_ID_EEPROM_READ_SCRATCH);
+		TA1 = w1_read_8(sl->master);
+		TA2 = w1_read_8(sl->master);
+		ES = w1_read_8(sl->master);
 		w1_read_block(sl->master, scratchpad_verify, W1_MIKROBUS_ID_EEPROM_VERIFY_SCRATCH_SIZE);
-		verify_status = memcmp(buf, scratchpad_verify + 3, W1_MIKROBUS_ID_EEPROM_SCRATCH_SIZE);
+		verify_status = memcmp(buf, scratchpad_verify, W1_MIKROBUS_ID_EEPROM_SCRATCH_SIZE);
 	} while(verify_status && --tries);
 
 	if(!tries && verify_status){
@@ -99,9 +99,9 @@ static int w1_mikrobus_id_movescratch(struct w1_slave *sl, int addr, char *buf)
 	}
 		
 	wrbuf[0] = W1_MIKROBUS_ID_EEPROM_COPY_SCRATCH;
-	wrbuf[1] = addr >> 8;
-	wrbuf[2] = addr & 0xFF;
-	wrbuf[3] = W1_MIKROBUS_ID_EEPROM_COPY_SCRATCH_ES;
+	wrbuf[1] = addr & 0xFF;
+	wrbuf[2] = addr >> 8;
+	wrbuf[3] = ES;
 	if (w1_reset_select_slave(sl))
 			return -1;
 	w1_write_block(sl->master, wrbuf, 4);
@@ -113,17 +113,17 @@ static int w1_mikrobus_id_writeblock(struct w1_slave *sl, int off, int count, ch
 {
 	u16 wraddr = 0;
 	u16 len = count - (count % W1_MIKROBUS_ID_EEPROM_SCRATCH_SIZE);
-	u8 scratchpad_write[W1_MIKROBUS_ID_EEPROM_SCRATCH_SIZE];
+	u8 scratchpad_write[W1_MIKROBUS_ID_EEPROM_SCRATCH_SIZE] = {0};
 
 	while(len > 0) {
-		w1_mikrobus_id_movescratch(sl, wraddr, buf + wraddr);
+		w1_mikrobus_id_movescratch(sl, wraddr + off, buf + wraddr);
 		wraddr += W1_MIKROBUS_ID_EEPROM_SCRATCH_SIZE;
 		len -= W1_MIKROBUS_ID_EEPROM_SCRATCH_SIZE;
 	}
 
 	if(count % W1_MIKROBUS_ID_EEPROM_SCRATCH_SIZE){
 		memcpy(scratchpad_write, buf + wraddr, count % W1_MIKROBUS_ID_EEPROM_SCRATCH_SIZE);
-		w1_mikrobus_id_movescratch(sl, wraddr, scratchpad_write);
+		w1_mikrobus_id_movescratch(sl, wraddr + off, scratchpad_write);
 	}
 
 	return 0;
@@ -134,13 +134,6 @@ static int w1_mikrobus_id_nvmem_read(void *priv, unsigned int off, void *buf, si
 	struct w1_slave *sl = priv;
 	int ret;
 
-	/* mikroBUS ID EEPROM does not support reading from offsets */
-	if (off)
-		return -EINVAL;
-
-	if (count > W1_MIKROBUS_ID_EEPROM_SIZE)
-		return -EINVAL;
-
 	mutex_lock(&sl->master->bus_mutex);
 	ret = w1_mikrobus_id_readblock(sl, off, count, buf);
 	mutex_unlock(&sl->master->bus_mutex);
@@ -153,9 +146,6 @@ static int w1_mikrobus_id_nvmem_write(void *priv, unsigned int off, void *buf, s
 	struct w1_slave *sl = priv;
 	int ret;
 
-	if ((off + count) > W1_MIKROBUS_ID_EEPROM_SIZE)
-		return -EINVAL;
-
 	mutex_lock(&sl->master->bus_mutex);
 	ret = w1_mikrobus_id_writeblock(sl, off, count, buf);
 	mutex_unlock(&sl->master->bus_mutex);
diff --git a/drivers/misc/mikrobus/mikrobus_manifest.c b/drivers/misc/mikrobus/mikrobus_manifest.c
index a5faa8bfcdbc..bd945110ba8c 100644
--- a/drivers/misc/mikrobus/mikrobus_manifest.c
+++ b/drivers/misc/mikrobus/mikrobus_manifest.c
@@ -458,12 +458,14 @@ size_t mikrobus_manifest_header_validate(void *data, size_t size)
 	struct greybus_manifest_header *header;
 	u16 manifest_size;
 
-	if (size < sizeof(*header)) {
+	header = data;
+	manifest_size = le16_to_cpu(header->size);
+	
+	if (manifest_size < sizeof(*header)) {
 		pr_err("short manifest (%zu < %zu)", size, sizeof(*header));
 		return -EINVAL;
 	}
-	header = data;
-	manifest_size = le16_to_cpu(header->size);
+
 	if (header->version_major > MIKROBUS_VERSION_MAJOR) {
 		pr_err("manifest version too new (%u.%u > %u.%u)",
 		header->version_major, header->version_minor,
-- 
2.25.1

